
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Youngmin
 */
public class QueueMain extends javax.swing.JFrame {
    /**
     * Creates new form QueueList
     */

    private Timer timer; // Timer for 2 sec count
    private static PriorityQueue<QueueDriver> tasks = new PriorityQueue<QueueDriver>(); // task queue 
    private static ArrayList<QueueDriver> priArray = new ArrayList<QueueDriver>(); // queue Arraylist for queueGUI display 
    JList list = new JList(); // list 
    static DefaultListModel model = new DefaultListModel(); // default list model 
    static QueuePanel thread = new QueuePanel();// QueuePanel object  
    public QueueMain() {
        initComponents();
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList(this.model);
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Print Queue - Youngmin Son");

        jScrollPane1.setViewportView(jList1);

        jTextField1.setText("               ENTER TASK");
        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTextField1MousePressed(evt);
            }
        });

        jTextField2.setText("                  ENTER PRIORITY");
        jTextField2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTextField2MousePressed(evt);
            }
        });

        jButton1.setText("ADD");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton1MousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        int pass = 0;
        int priorityPass =0;
        try{
             PriorityQueue<QueueDriver> temp ;

             ActionListener startListener = new ActionListener() {
                 @Override
                 public void actionPerformed(ActionEvent e) { // timer      	
                     if (!timer.isRunning()) {
                         jTextField1.setEnabled(true);
                         jButton1.setEnabled(true);
                         timer.start();
                	 } 
                 }
             };
            // jTextField1.addActionListener(startListener);
             jButton1.addActionListener(startListener);
             timer = new Timer(2000, new ActionListener()  // action listener  ( set to 2000ms = 2 s ) 
             {
                 @Override
                 public void actionPerformed(ActionEvent e) {
                //   QueuePanel.queueArea.append(tasks.remove() + " cleared  " + "\n");
                	 if(tasks.size()>0) // chec size of Queue 
                	 {
                     sort(); // sort Queue by its Priority 
                	 removeQueue(tasks.peek().getPriority());
                	 int pri = (int) tasks.peek().getPriority();
                     QueuePanel.queueArea.append(tasks.remove() + " cleared  "  +  "Priority  : " +  pri  + " #of tasks left : " + tasks.size() + "\n" );
                	 } // display it on the result panel 
                     jTextField1.setEnabled(true); // enable input area
                     jButton1.setEnabled(true);    // enbale OK button 
                 }
             });
             timer.setRepeats(true); // runs until the Queue is empty (Queue.size () = 0) 
             // if the priority of new queue is lower than all of the other queues , make its time left 2 seconds
             if(tasks.size()==0)
             {
                 priorityPass=1;
             }
             if(pass == 0 )
             {    
             for( int a =0; a < priArray.size(); a++)
             {
                 if(Integer.parseInt(this.jTextField2.getText()) < priArray.get(a).getTime())
                 {
                      priorityPass =1;
                      pass=1;
                 }
             }
             if(priorityPass == 1)
                 {
                 tasks.add(new QueueDriver(this.jTextField1.getText(), Integer.parseInt(this.jTextField2.getText()),  2 )); 
                 priArray.add(new QueueDriver(this.jTextField1.getText(), Integer.parseInt(this.jTextField2.getText()),  2));
                 pass=1;
                
                 }
             }
             // if the size of queue is more than 1 or equal to 1 
             if(tasks.size() > 0 && pass == 0)
             {
             tasks.add(new QueueDriver(this.jTextField1.getText(), Integer.parseInt(this.jTextField2.getText()), tasks.size() * 2 )); // set time to # of queue times 2 
             priArray.add(new QueueDriver(this.jTextField1.getText(), Integer.parseInt(this.jTextField2.getText()), tasks.size() * 2));
             pass=1;
             }
             // if the size of queue is more than 1 or equal to 1 
             if(tasks.size() == 0 && pass == 0)
             {
             tasks.add(new QueueDriver(this.jTextField1.getText(), Integer.parseInt(this.jTextField2.getText()), 2)); // set time to 2s 
             priArray.add(new QueueDriver(this.jTextField1.getText(), Integer.parseInt(this.jTextField2.getText()), 2));
             pass=1;
             }
             addQueue();
             /*
             while(tasks.size() !=0)
             {
             TimeThread b = new TimeThread(); // Time thrad object
             b.start(); // Thread Starts counting
             synchronized(b){ 
             b.wait(); // wait util thread is done 
             */
          //   removeQueue(tasks.peek().getPriority());
            // QueuePanel.queueArea.append(tasks.remove() + " cleared"  + "\n");              
        }
           // removeQueue(tasks.peek().getPriority());
          //   QueuePanel.queueArea.append(tasks.remove() + " cleared"  + "\n");    
         catch (NumberFormatException e)
         {
             JOptionPane.showMessageDialog(null, "[ERROR] CHECK YOUR INPUT BOXES!" );
         }  
    }//GEN-LAST:event_jButton1MouseClicked
    private void jTextField1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MousePressed
        this.jTextField1.setText(""); // set to black when cliecked
    }//GEN-LAST:event_jTextField1MousePressed
    private void jTextField2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField2MousePressed
         this.jTextField2.setText(""); // set to black when cliecked    
    }//GEN-LAST:event_jTextField2MousePressed
    // clears the list GUI
    private void refeshQueue()
    {
        this.model.clear();
    }
    // sorts the ArrayList by its Object's Priority 
    // uses the Bubbles Sort Algorithm
    private void sort()
    {
       QueueDriver temp;
       for(int a =0; a < priArray.size()-1; a++)
       {
           for(int b =0; b < priArray.size()-1; b++)
           {
               if(priArray.get(b).getPriority() > priArray.get(b+1).getPriority())
               {
                   temp = priArray.get(b);
                   priArray.set(b, priArray.get(b+1));
                   priArray.set(b+1, temp); 
               }
           }
       }
       /*
       priArray.set(0, new QueueDriver(priArray.get(0).getName(), priArray.get(0).getPriority() , 2));
       if(priArray.size()>1)
       {
       priArray.set(1, new QueueDriver(priArray.get(1).getName(), priArray.get(1).getPriority() , 4));
       }
       */
       for(int a = 0; a < priArray.size(); a++)
       {
           String temp1= priArray.get(a).getName();
           int temp2= priArray.get(a).getPriority();
           priArray.set(a, new QueueDriver(temp1, temp2,  (a+1)*2));
       } 
    }
    // adds queue to Print-Queue GUI 
    private void addQueue()
    {
             refeshQueue();
             sort();
             for (QueueDriver priArray1 : priArray) {
                 this.model.addElement("Name " + " " + priArray1.getName() + "  Priority : " + String.valueOf(priArray1.getPriority()) + " Time Left : " + String.valueOf(priArray1.getTime() + "s")); // add Queue to queue list GUI 
             }
    }

    //removes the queue that is already printed from queue arraylist and removes it from the JList GUI Panel 
    private void removeQueue(int temp)
    {
    	for(int a =0; a < priArray.size(); a++)
    	{
    		if(priArray.get(a).getPriority() == temp)
    		{
    			priArray.remove(a);
    			addQueue();
    		}
    	}
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QueueMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QueueMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QueueMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QueueMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                thread.setVisible(true);
                thread.setLocation(400, 0);
                for(int a =0; a < 10; a+=2)
                {
                    tasks.add(new QueueDriver("Task#" + a,a, (tasks.size())*2)); // set time to 2s 
                    priArray.add(new QueueDriver("Task#" + a, a, (tasks.size())*2)); 
                }
                for (QueueDriver priArray1 : priArray) {
                 model.addElement("Name " + " " + priArray1.getName() + "  Priority : " + String.valueOf(priArray1.getPriority()) + " Time Left : " + String.valueOf(priArray1.getTime() + "s")); // add Queue to queue list GUI 
             }
                new QueueMain().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton jButton1;
    public static javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
